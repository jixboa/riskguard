import "./App.css";
import React, { useEffect, useState } from "react";
import { useDispatch } from "react-redux";

import SignIn from "./components/auth/SignIn";
import SignUp from "./components/auth/SignUp";
import NavBar from "./components/navigators/NavBar";
import Footer from "./components/navigators/Footer";
import NestedGrid from "./components/indicators/NestedGrid";
import Candidates from "./components/indicators/CandidateRegister";

import Individual from "./components/indicators/individual";
import Corporate from "./components/indicators/corporate";
import ItemsManager from "./components/managementtools/item";
import ScoreManager from "./components/managementtools/score";
import IndicatorManager from "./components/managementtools/indicator";

import { getIndicators } from "./store/actions/indicatorAction";
import { loadUser } from "./store/actions/authAction";
import { getScores } from "./store/actions/scoreAction";
import { getItems } from "./store/actions/itemAction";

import { BrowserRouter, Routes, Route } from "react-router-dom";
import { Container } from "@material-ui/core";

import { ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

import BounceLoader from "react-spinners/BounceLoader";

import backgroundImage from "./docs/backgd.jpg";

import { makeStyles } from "@material-ui/styles";
import "@fontsource/roboto/400.css";

const useStyles = makeStyles({
  containerStyle: {
    position: "fixed",
    top: 0,
    left: 0,
    height: "100vh",
    overflow: "auto", // Add overflow auto to enable scrolling
    backgroundImage: `url(${backgroundImage})`,
    backgroundSize: "cover",
    backgroundAttachment: "scroll", // Set the background attachment to scroll
  },
  contentStyle: {
    margin: "50px auto",
    padding: "20px",
  },
});

function App() {
  const classes = useStyles();
  const dispatch = useDispatch();
  const [loading, setLoading] = useState(true);
  let [color, setColor] = useState("#35acce");

  useEffect(() => {
    const loadData = async () => {
      await dispatch(loadUser());
      setLoading(false);
    };

    loadData().catch(() => setLoading(false));
  }, [dispatch]);

  useEffect(() => {
    const loadData = async () => {
      await dispatch(getIndicators());
      setLoading(false);
    };

    loadData().catch(() => setLoading(false));
  }, [dispatch]);

  useEffect(() => {
    const loadData = async () => {
      await dispatch(getScores());
      setLoading(false);
    };

    loadData().catch(() => setLoading(false));
  }, [dispatch]);

  useEffect(() => {
    const loadData = async () => {
      await dispatch(getItems());
      setLoading(false);
    };

    loadData().catch(() => setLoading(false));
  }, [dispatch]);

  if (loading) {
    return (
      <div
        style={{
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          height: "100vh",
        }}>
        <BounceLoader color="#0d75a8" />
      </div>
    );
  }

  return (
    <div className="App">
      <BrowserRouter>
        <ToastContainer />
        <NavBar />
        <Container className={classes.containerStyle} maxWidth="xl">
          <Container className={classes.contentStyle} maxWidth="xl">
            <Routes>
              <Route path="/" exact element={<SignIn />} />
              <Route path="/signin" exact element={<SignIn />} />
              <Route path="/signup" exact element={<SignUp />} />
              <Route path="/indprofiler" exact element={<Individual />} />
              <Route path="/corprofiler" exact element={<Corporate />} />
              <Route path="/nested" exact element={<NestedGrid />} />
              <Route path="/candidates" exact element={<Candidates />} />
              <Route path="/items" exact element={<ItemsManager />} />
              <Route path="/scores" exact element={<ScoreManager />} />
              <Route path="/indicators" exact element={<IndicatorManager />} />
            </Routes>
          </Container>

          <Footer />
        </Container>
      </BrowserRouter>
    </div>
  );
}

export default App;
